



//fibinacci

public static int fibo(int num){
	
		if(num==0 || num ==1){
			return num;
	}else
		return fibo(num-1)+fibo(num-2);

}

public static int fib(int num){

	int n1 = 0;
	int n2 =  1;
	int n3 = 0;
	
	if(num ==0 || num == 1){
		return num;
	}else{
	while(num >= 0){
	
		n1 = n2;
		n2= n3;
		n3 = n1 + n2;
		num--;
	}
}
return n3;
}

//factorial

public static int fact(int num){
	
	if(num == 0 || num == 1 ){
		return 1;
	}else
		return num * fact(num -1);


}

public static int factorial(int num){

int facr = 1;
	while(num >= 1){
		facr = facr*num;
		num--;
	}
return facr;
}


public static int getGdc(int m, int n){
	
	if(n == 0) {
		return m;
	}else
		return getGdc (n, m%n);
}

public static int gcd(int n, int m){

	int num = Math.min(n, m);
	int gcd = 1;

	for(int i = 2 ; i <= num ; i++ ) {
		
		if( n % i == 0 && m % i == 0){
			gcd = i;
		}
		
	
}
 return gcd;
}


//check if prime

public static boolean isPrime(int num){

	for(int i = 2 ; i <= num/2; i++){
		if(num % i ==0 ){
			return false;
	}
}
	return true;
}

//